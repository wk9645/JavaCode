package com.sax_parse;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;


/*
 * 使用SAX解析
 * 
 */

public class SAXParse2 {

	public static void main(String[] args) throws Exception {
		parseWithSAX();
	}
	
	public static void parseWithSAX() throws Exception{
		
		SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
		MyDefaultHandler2 handler = new MyDefaultHandler2();
		parser.parse(new File("./src/person.xml"), handler);
		List<Person> persons = handler.getList();
		
		System.out.println(persons.size());
		for(Person person : persons){
			
			System.out.println(person.toString());
		
		}
	}
}

class MyDefaultHandler2 extends DefaultHandler{
	
	List<Person> persons = new ArrayList<>();
	private Person person;
	private String curTag;
		
		
	public List<Person> getList(){
		return persons;
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

		//记录下当前标签名
		curTag = qName;
		
		//开始标签判断如果为对象名称则创建对象实例
		if("person".equals(qName)){
			person = new Person();
		
			String idValue = attributes.getValue("id");
			person.setId(idValue);
		}
	}
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		
		String content = new String(ch, start, length);
		if("name".equals(curTag)){
			person.setName(content);
		}
		if("age".equals(curTag)){
			person.setAge(content);
		}
	}
	
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		//设置空时为了避免空格换行设置到对象的属性中(空格和换行设置到了对象标签的子标签中)
		//curTag = null;
		
		//结束标签用来向容器中添加对象
		if("person".equals(qName));
			persons.add(person);
	}
}
